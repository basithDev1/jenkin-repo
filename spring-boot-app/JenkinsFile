pipeline{
    agent{
        docker{
            image 'basith12/jenkins-maven-agent:latest'
            args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
        }
    }

    stages{
        stage('Checkout'){
            steps {
                sh 'echo checkout stage started'
                git branch: 'main', url:'https://github.com/basithDev1/jenkin-repo/' 
            }
        }
        stage('Build and Test'){
            steps{
                sh 'ls -ltr'
                //Building the proj and will rceive the .jar files//
                sh 'cd spring-boot-app && mvn clean package'
            }
        }
        stage('Static Code Analysis'){
            environment{
                SONAR_URL= "http://13.203.21.66:9000"
            }
            steps{
                withCredentials([string(credentialsId:'sonarqube' , variable:'SONAR_AUTH_TOKEN')])
                {
                    sh 'cd spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'

                }
            }

        }
        stage('Build and push Docker Image'){
            environment{
                DOCKER_IMAGE="basith12/cicd-spring-img:${BUILD_NUMBER}"
                DOCKERFILE_LOCATION='spring-boot-app/Dockerfile'
                REGISTRY_CREDENTIALS = credentials('docker-cred')
            }
            steps{
                script{
                    sh 'cd spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
                    def dockerImage= docker.image("${DOCKER_IMAGE}")
                    docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                    dockerImage.push()
                    }
                }
            }
        }
     stage('Update Deployment.yml file') {
            environment {
                GIT_REPO_NAME = "jenkin-repo"
                GIT_USER_NAME = "basithDev1"
            }
            steps {
                dir("${env.WORKSPACE}") {
                    withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                        sh '''
                            echo "--- Working Directory Debug ---"
                            pwd
                            ls -la

                            # Add safe directory to resolve ownership issue
                            git config --global --add safe.directory /var/lib/jenkins/workspace/SprinBootPipeline

                            # Verify if it's a Git repository
                            git -C . rev-parse --is-inside-work-tree || echo "Not inside a Git repository"

                            # Set Git configuration for the repository
                            git -C . config user.email "basith.xyz@gmail.com"
                            git -C . config user.name "basithDev1"

                            # Replace image tag in deployment file
                            sed -i "s|image: .*|image: basith12/cicd-spring-img:${BUILD_NUMBER}|g" spring-boot-app-manifests/deployment.yml


                            # Add and commit changes
                            git -C . add spring-boot-app-manifests/deployment.yml
                            git -C . commit -m "Update deployment image to version ${BUILD_NUMBER}" || echo "Nothing to commit"

                            # Define the Git URL explicitly and include .git
                            URL="https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME}.git"
                            echo "Pushing to: $URL"

                            # Push changes with properly quoted URL
                            git -C . push "$URL" HEAD:main
                        '''
                    }
                }
            }
        }
}
    }
